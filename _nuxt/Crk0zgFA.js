var O=Object.defineProperty;var G=(r,l,t)=>l in r?O(r,l,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[l]=t;var c=(r,l,t)=>G(r,typeof l!="symbol"?l+"":l,t);import{a as k,M as a,b as m,c as C,G as R,H as A}from"./C5GGynV2.js";import{t as V,b as d}from"./BBggtmFf.js";import{M,C as H,a as E}from"./Ch8e8etN.js";const n=class n extends k{constructor(t){super(t);c(this,"changeVolume");c(this,"doseVolume");this.changeVolume=t.changeVolume,this.doseVolume=t.doseVolume}get isLiquid(){return!!this.waterVolume}get isDry(){return!this.isLiquid}static countCaGh(t,e,s){return t*e*a/(n.GH.Ca*s)}static countMgGh(t,e,s){return t*e*a/(n.GH.Mg*s)}static countGh(t,e=1,s=1){let o=null;return"Ca"in t&&(o=(o??0)+n.countCaGh(t.Ca,e,s)),"Mg"in t&&(o=(o??0)+n.countMgGh(t.Mg,e,s)),o}static countKh(t,e=1,s=1){let o=null;return"HCO3"in t&&(o=t.HCO3*e/new M("CO3").mass*a*n.KH_RATIO/s),o}countReagentAmountByGh(t,e){let s=0;return"Ca"in t.ions?s=e*n.GH.Ca*this.changeVolume/(t.ions.Ca*a):"Mg"in t.ions&&(s=e*n.GH.Mg*this.changeVolume/(t.ions.Mg*a)),this.isLiquid&&(s*=this.totalVolume/this.doseVolume),s}countReagentAmountByKh(t,e){let s=0;return"CO3"in t.ions&&(s=e*this.changeVolume*new M("CO3").mass/(n.KH_RATIO*t.HCO3)/(t.ions.CO3*a)),this.isLiquid&&(s*=this.totalVolume/this.doseVolume),s}get ghPerReagent(){const t={};let e=1,s;return this.isLiquid?(s=this.totalVolume/m,e=this.doseVolume/this.totalVolume):s=this.totalMass,this.reagents.forEach(o=>{const i=n.countGh(this.concentrationPerReagent[o.key],s,this.changeVolume);t[o.key]=i!==null?i*e:null}),t}get khPerReagent(){const t={};let e=1,s;return this.isLiquid?(s=this.totalVolume/m,e=this.doseVolume/this.totalVolume):s=this.totalMass,this.reagents.forEach(o=>{const i=n.countKh(this.concentrationPerReagent[o.key],s,this.changeVolume);t[o.key]=i!==null?i*e:null}),t}get gh(){let t=null;return Object.values(this.ghPerReagent).forEach(e=>{e!==null&&(t+=e)}),t}get kh(){let t=null;return Object.values(this.khPerReagent).forEach(e=>{e!==null&&(t+=e)}),t}get caMgRatio(){return n.countRatio(this.concentration,"Ca","Mg")}get concentrationWithoutHCO3(){return Object.fromEntries(Object.entries(this.concentration).filter(([t])=>t!==C))}get concentrationInChangeWater(){const t={};return Object.entries(this.concentrationWithoutHCO3).forEach(([e,s])=>{this.isDry?t[e]=s*this.totalMass*m/this.changeVolume:t[e]=s*this.doseVolume/this.changeVolume}),t}get tds(){let t=0;return V(this.concentration).forEach(([e,s])=>{e!==C&&e!==R&&(this.isDry?t+=s*this.totalMass*a/this.changeVolume:t+=s*this.doseVolume/this.changeVolume)}),t}get cations(){const t={};V(this.concentration).forEach(([s,o])=>{H.includes(s)&&(this.isDry?t[s]=[o,o*this.totalMass*a/this.changeVolume]:t[s]=[o,o*this.doseVolume/this.changeVolume])});const e=d(t).reduce((s,o)=>s+o[0],0);return Object.keys(t).forEach(s=>{t[s][0]/=e}),t}get anions(){const t={};V(this.concentration).forEach(([s,o])=>{E.includes(s)&&(this.isDry?t[s]=[o,o*this.totalMass*a/this.changeVolume]:t[s]=[o,o*this.doseVolume/this.changeVolume])});const e=d(t).reduce((s,o)=>s+o[0],0);return Object.keys(t).forEach(s=>{t[s][0]/=e}),t}splitGhToCaMgAmounts(t,e){const s=t*this.changeVolume/(e/n.GH.Ca+1/n.GH.Mg);return[s*e,s]}updateReagentAmountsByGh(t,e={}){const s={...this.ghPerReagent};let o=0;this.reagents.filter(h=>e[h.key]).forEach(h=>{o+=s[h.key]});const i=this.gh;this.reagents.filter(h=>!e[h.key]).forEach(h=>{if(h.key!==A){const g=(t-o)/(i-o),u=h.amount*g;h.isLiquid&&this.isLiquid&&this.correctWaterVolumeByReagentAmount(u,h.amount),this.setReagentAmount(u,h.key)}})}updateReagentAmountsByGhAndCaMgRatio(t,e){let[s,o]=this.splitGhToCaMgAmounts(t,e);this.isLiquid&&(s*=this.totalVolume/this.doseVolume,o*=this.totalVolume/this.doseVolume);let i,h;this.isDry?(i=n.countCaGh(this.concentration.Ca,this.totalMass,this.changeVolume),h=n.countMgGh(this.concentration.Mg,this.totalMass,this.changeVolume)):(i=n.countCaGh(this.concentration.Ca,this.doseVolume/m,this.changeVolume),h=n.countMgGh(this.concentration.Mg,this.doseVolume/m,this.changeVolume));const g={...this.ghPerReagent};this.reagents.forEach(u=>{let f=1;"Ca"in u.ions&&(f=g[u.key]/i,this.setReagentAmount(s*f/(u.ions.Ca*1e3),u.key)),"Mg"in u.ions&&(f=g[u.key]/h,this.setReagentAmount(o*f/(u.ions.Mg*1e3),u.key))})}updateReagentAmountsByKh(t){const e=this.kh;let s=1,o=1;this.reagents.forEach(i=>{let h=1;"CO3"in i.ions&&(h=t/e,this.setReagentAmount(i.amount*h,i.key),"Ca"in i.ions&&(o*=h),"Mg"in i.ions&&(s*=h))}),this.reagents.forEach(i=>{"CO3"in i.ions||"Ca"in i.ions&&this.setReagentAmount(i.amount*s,i.key),"CO3"in i.ions||"Mg"in i.ions&&this.setReagentAmount(i.amount*o,i.key)})}toJson(){return{name:this.name,description:this.description,totalVolume:this.totalVolume,changeVolume:this.changeVolume,doseVolume:this.doseVolume,reagents:this.reagents.map(t=>({...t.toJson()}))}}};c(n,"GH",{Mg:4.346,Ca:7.144}),c(n,"KH_RATIO",2.804),c(n,"countRatio",(t,e,s)=>{const o=t[e],i=t[s];return o&&i?o/i:null});let y=n;export{y as R};
