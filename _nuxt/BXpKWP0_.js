var S=Object.defineProperty;var N=(r,t,s)=>t in r?S(r,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):r[t]=s;var g=(r,t,s)=>N(r,typeof t!="symbol"?t+"":t,s);import{t as d}from"./BBggtmFf.js";const O={H:1.00794,B:10.811,C:12.0107,N:14.0067,O:15.9994,Na:22.98976928,Mg:24.30505,Si:28.0855,P:30.97376,S:32.06479,Cl:35.45294,K:39.0983,Ca:40.07802,V:50.94147,Mn:54.93804,Fe:55.84514,Co:58.93319,Ni:58.69335,Cu:63.54604,Zn:65.37778,Rb:85.46766,Sr:87.61664,Mo:95.95979,I:126.90447},h={NO3:"N",PO4:"P",P2O5:"P2",SO4:"S",K2O:"K2",MgO:"Mg",CaO:"Ca"},b={N:"NO3",P:"PO4",S:"SO4",K:"K2O",Mg:"MgO",Ca:"CaO",C:"CO3"},I=[...Object.keys(O),...Object.keys(h)],L=["Ca","Mg","K","Na"],T=["Cl","SO4","CO3","CH3COO","C6H11O7"];class n{constructor(t){g(this,"formulaInit");try{const s=n.replaceSupAndSub(t);this.formulaInit=n.cleanParentheses(s)}catch{throw new Error("Error format")}}static replaceSupAndSub(t){return t.replace(/[⁰¹²³⁴-⁹₀-₉]/g,s=>s.charCodeAt(0).toString(16).slice(-1))}static isLowerCase(t){return/^[a-z]$/.test(t)}static isUpperCase(t){return/^[A-Z]$/.test(t)}static isNumber(t){return/^\d+$/.test(t)}get mass(){let t=0;return Object.keys(this.composition).forEach(s=>{t+=O[s]*this.composition[s]}),t}get fraction(){const t={};return Object.keys(this.composition).forEach(s=>{t[s]=O[s]*this.composition[s]/this.mass}),t}get composition(){return n.formulaToJson(this.formulaInit)}get simplifiedFormula(){return this.createSimplifiedFormula()}static createComposition(t){const s={};return t.forEach(([e,i])=>{e in s?s[e]+=+i:s[e]=+i}),s}static getParenthesisGroups(t){const s=[],e=[];return t.split("").forEach((i,c)=>{i==="("&&s.push(c),i===")"&&e.push([s.pop(),c])}),e}static createElemList(t){const s=t.split("");let e="",i="";const c=[];return s.forEach(o=>{e.length===0&&n.isUpperCase(o)?e=o:e.length===1&&n.isLowerCase(o)?e+=o:e.length>0&&(n.isNumber(o)?i+=o:n.isUpperCase(o)&&(i.length===0&&(i="1"),c.push([e,i]),e=o,i=""))}),i.length===0&&(i="1"),c.push([e,i]),c}static cleanParentheses(t){if(!t.includes("("))return t;const s=n.getParenthesisGroups(t)[0],[e,i]=s;let c="",o=1;for(;n.isNumber(t[i+o]);)c+=t[i+o],o+=1;c.length===0&&(c="1");const a=+c,m=t.substring(e+1,i),C=n.createElemList(m);let p="";C.forEach(([l,u])=>{p+=l,p+=u*a});let f=`(${m})`;a!==1&&(f+=a);const E=t.replace(f,p);return n.cleanParentheses(E)}static formulaToJson(t){if(t.length===0)return{};const s=n.createElemList(t);return n.createComposition(s)}createSimplifiedFormula(){let t="";return Object.entries(this.composition).forEach(([s,e])=>{t+=s,e!==1&&(t+=e)}),t}}const A=r=>{const t=new n(r).mass;return new n(h[r]).mass/t},M=r=>{const t=new n(r).mass;return new n(b[r]).mass/t},j=(r,t)=>{const s=new n(r).mass;return new n(t).mass/s},x=r=>{const t=d(r);return t.sort((s,e)=>e[1]-s[1]),t};export{I as A,L as C,n as M,T as a,A as b,j as c,M as g,x as s};
